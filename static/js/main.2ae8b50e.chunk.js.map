{"version":3,"sources":["logo.svg","Components/Nav/MenuItems.js","Components/Nav/nav.js","Components/Body/text.js","Components/Body/body.js","App.js","reportWebVitals.js","index.js"],"names":["MenuItems","title","url","cName","MenuIcons","Icon","Navbar","React","useState","clicked","setClicked","scrolled","setScrolled","window","scrollY","setScrollY","handleScroll","offset","useEffect","addEventListener","navbarClasses","push","id","className","join","onClick","map","item","index","href","to","spy","smooth","duration","texts","body","title_style","body_style","image","image_style","container","children","Body","contains_title","contains_body","split","reduce","total","line","contains_img","src","contains_children","i","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","basename","location","pathname","exact","path","component","document","getElementById"],"mappings":"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","file":"static/js/main.2ae8b50e.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.103b5fa1.svg\";","export const MenuItems = [\r\n\r\n\t{\r\n\t\ttitle: 'About',\r\n\t\turl: 'about',\r\n\t\tcName: 'nav-links'\r\n\t},\r\n\r\n\t{\r\n\t\ttitle: 'NUIBot',\r\n\t\turl: 'NUIBot',\r\n\t\tcName: 'nav-links'\r\n\t},\r\n\r\n\t\r\n\t{\r\n\t\ttitle: \"Other\",\r\n\t\turl: \"Other\",\r\n\t\tcName: 'nav-links'\r\n\t}\r\n\t\r\n]\r\n\r\n\r\n\r\nexport const MenuIcons = [\r\n\t{\r\n\t\ttitle: 'github',\r\n\t\turl: '',\r\n\t\tcName: 'nav-icons',\r\n\t\tIcon: 'fab fa-github'\r\n\t},\r\n\r\n\t{\r\n\t\ttitle: 'linkedin',\r\n\t\turl: '',\r\n\t\tcName: 'nav-icons',\r\n\t\tIcon: 'fab fa-linkedin'\r\n\t},\r\n\t\r\n]","import React, {useEffect} from 'react'\r\nimport { MenuItems, MenuIcons } from './MenuItems'\r\nimport {Link, animateScroll as scroll, scrollSpy} from \"react-scroll\"\r\nimport './nav.css'\r\n\r\n\r\nfunction Navbar () {\r\n\tconst [clicked, setClicked] = React.useState(false);\r\n\tconst [scrolled, setScrolled] = React.useState(false);\r\n\tconst [scrollY, setScrollY] = React.useState(window.scrollY);\r\n\t\r\n\r\n\r\n\r\n\tconst handleClick = () => {\r\n\t\tsetClicked(!clicked);\r\n\t};\r\n\r\n\tconst handleScroll = () => {\r\n\t\tconst offset = window.scrollY;\r\n\t\tsetScrollY(offset);\r\n\t\tif(offset > 100) {\r\n\t\t\tsetScrolled(true);\r\n\t\t}\r\n\t\telse {\r\n\t\t\tsetScrolled(false);\r\n\t\t}\r\n\t}\r\n\r\n\t//initialise on mount\r\n\tuseEffect(() => {\r\n\t\twindow.addEventListener('scroll', handleScroll)\r\n\t})\r\n\r\n\r\n\tlet navbarClasses = ['NavbarItems'];\r\n\t//whenever scroll changes\r\n\tif(scrolled) {\r\n\t\tnavbarClasses.push('sticky')\r\n\t\r\n\t};\r\n\r\n\r\n\r\n\r\n\r\n\treturn (\r\n\t\t<nav id='navbar' className= {navbarClasses.join(\" \")}>\r\n\t\t\t<h1 className=\"navbar-logo\">Jacky Xie<i className=\"fab fa-react\"></i></h1>\r\n\t\t\t<div className= \"menu-icon\" onClick={handleClick}>\r\n\t\t\t\t<i className={clicked ? 'fas fa-times' : 'fas fa-bars'}></i>\r\n\r\n\t\t\t</div>\r\n\r\n\t\t\t<ul className={clicked ? 'nav-menu active' : 'nav-menu'}>\r\n\t\t\r\n\t\t\t\t{MenuIcons.map((item, index) => {\r\n\t\t\t\t\treturn (\r\n\t\t\t\t\t\t<li className={item.cName}>\r\n\t\t\t\t\t\t\t<a className={item.Icon} href={item.url}/>\r\n\t\t\t\t\t\t</li>\r\n\t\t\t\t\t\t)\r\n\r\n\t\t\t\t\t})\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\t{MenuItems.map((item, index) => {\r\n\t\t\t\t\treturn (\r\n\t\t\t\t\t\t<li>\r\n\t\t\t\t\t\t\t<a className={item.cName}>\r\n\t\t\t\t\t\t\t\t{scrolled ? \r\n\t\t\t\t\t\t\t\t\t<Link \r\n\t\t\t\t\t\t\t\t\tto={item.url}\t\t\t\t\t\t\t\t\t    \r\n\t\t\t\t\t\t\t\t\tspy={true}\r\n\t\t\t\t\t\t\t\t    smooth={true}\r\n\t\t\t\t\t\t\t\t    offset={-90}\r\n\t\t\t\t\t\t\t\t    duration={500}>\r\n\t\t\t\t\t\t\t\t\t{item.title}\r\n\t\t\t\t\t\t\t\t\t</Link>\r\n\t\t\t\t\t\t\t\t\t:\r\n\t\t\t\t\t\t\t\t\t<Link \r\n\t\t\t\t\t\t\t\t\tto={item.url}\r\n\t\t\t\t\t\t\t\t\tspy={true}\r\n\t\t\t\t\t\t\t\t    smooth={true}\r\n\t\t\t\t\t\t\t\t\toffset={-160}\r\n\t\t\t\t\t\t\t\t\tduration={500}>\r\n\t\t\t\t\t\t\t\t\t{item.title}\r\n\t\t\t\t\t\t\t\t\t</Link>\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t</a>\r\n\t\t\t\t\t\t</li>\r\n\t\t\t\t\t\t)\r\n\r\n\t\t\t\t\t})\r\n\t\t\t\t} \r\n\r\n\t\t\t</ul>\r\n\r\n\t\t</nav>\r\n\r\n\t)\r\n\t\r\n}\r\n\r\nexport default Navbar","export const texts =  \r\n[\r\n\r\n\t{\r\n\t\ttitle: 'About Me',\r\n\t\tbody: `WHOAMI? I am a budding third year student undertaking a bachelors in Software Engineering at \r\n\t\tthe University of New South Wales. I strive to achieve a vastly diversified\r\n\t\tportfolio of projects in multiple fields as I believe in this rapidly changing era of technology; \r\n\t\tbeing a 'Jack of All Trades' would be a great addition to any team when trying to engineer a solution\r\n\t\t\r\n\t\tTechnologies I have interracted with include:\r\n\t\tFlask, NodeJs, ReactJs, Heroku/Github Pages, Pandas/Numpy,\r\n\t\tBeautifulSoup, Pygame, Celery, SKlearn.`,\r\n\t\ttitle_style: \"about_title\",\r\n\t\tbody_style: \"about_style\",\r\n\t\timage: \"macsublime.jpg\",\r\n\t\timage_style: \"about_image\",\r\n\t\tcontainer: \"about_container\",\r\n\t\tid: \"about\",\r\n\t},\r\n\r\n\t{\r\n\t\ttitle: 'NUIBot - A Discord music bot',\r\n\t\tbody: `Built a simple bot for broadcasting music within a dicord voice channel\r\n\t\tThe bot is built using the discord.js library on top of a Nodejs webserver.\r\n\t\tNUIBot works on top of Ytdl(youtube download) and Yt-search(youtube search)\r\n\t\tpackages which handles the downloading and querying aspects utilising the prebuilt\r\n\t\twebsocket technologies provided within the discordjs api to broadcast the music to the \r\n\t\tserver via a bot client instance.\r\n\r\n\t\tThis bot is a simple bot that connects the pre-existing architectures that handles the \r\n\t\tencoding/decoding aspects of music streaming and serves as a physical interface for \r\n\t\tthe server to interact with these pre-existing technologies.`,\r\n\t\ttitle_style: \"nui_title\",\r\n\t\tbody_style: \"nui_style\",\r\n\t\timage: \"bot.gif\",\r\n\t\timage_style: \"nui_image\",\r\n\t\tcontainer: \"nui_container\",\r\n\t\tid: \"NUIBot\",\r\n\r\n\t},\r\n\r\n\t{\r\n\t\ttitle: 'Other Projects',\r\n\t\tcontainer: \"other_container\",\r\n\t\ttitle_style: \"other_title\",\r\n\t\tid: \"Other\",\r\n\t\tchildren: [\r\n\t\t\t{\r\n\t\t\t\ttitle: 'Hackathon COVID location tracker',\r\n\t\t\t\tbody: \r\n\t\t\t\t`As part of a team of three in a 24 hr UNSW CSESOC Annual Hackathon event\r\n\t\t\t\twe built a simple webapp on top of ExpressJS served on a Flask webserver.\r\n\t\t\t\tThe webapp periodically scraped the official NSW Coronavirus data records and \r\n\t\t\t\tdisplays the Cases grouped by suburbs.\r\n\r\n\t\t\t\tThe main objective of this webapp is to extract and display the most important information\r\n\t\t\t\tfrom the chaos and panick that engulfs anything COVID related, i.e. the number of new Cases\r\n\t\t\t\tand where it is detected. \r\n\t\t\t\tAs the vast majority of members of society will not be bothered to check the headmaps for the official numbers\r\n\t\t\t\tand only really care if there has been any new cases near them.\r\n\r\n\t\t\t\tMy role in this project was to connect the Front/Back-End as well as designing the \r\n\t\t\t\tdata collection architecture i.e. using BeautifulSoup and python Requests library\r\n\t\t\t\tto collect the official numbers. As well as using Pandas to process the information to be served by the\r\n\t\t\t\tWebapp.`,\r\n\t\t\t\ttitle_style: \"p_title\",\r\n\t\t\t\tbody_style: \"p_body\",\r\n\t\t\t\tcontainer: \"p\"\r\n\t\t\t},\r\n\r\n\t\t\t{\r\n\t\t\t\ttitle: 'NLP twitter sentiment extraction',\r\n\t\t\t\tbody: \r\n\t\t\t\t`This project is still in WIP progress, as I am still in the process of learning\r\n\t\t\t\thow to apply the BERT architecture to the NLP problem.\r\n\t\t\t\tThis kaggle competition gives you a tweet and a classified sentiment, and the objective is\r\n\t\t\t\tto extract the sub-paragraph within the text which best represents its sentiment.\r\n\r\n\t\t\t\tPreviously I have experimented on using a combination of Machine Learning algorithms such as:\r\n\t\t\t\t\t- Naive Bayes\r\n\t\t\t\t\t- Linear regressions \r\n\t\t\t\tto try to classify and then extract the subtext, HOWEVER. This technique gave a sub-optimal result\r\n\t\t\t\taveraging at a 55-60% jaccard similarity score on the test-data.\r\n\r\n\t\t\t\tTherefore I am in the process of learning how to fine tune a neural network such as BERT \r\n\t\t\t\t(Bidirectional Encoder Representations from Transformers) to achieve higher scores in completing\r\n\t\t\t\tthis Natural language processing problem.`,\r\n\t\t\t\ttitle_style: \"p_title\",\r\n\t\t\t\tbody_style: \"p_body\",\r\n\t\t\t\tcontainer: \"p\"\r\n\t\t\t},\r\n\r\n\t\t\t{\r\n\t\t\t\ttitle: 'This website',\r\n\t\t\t\tbody: `This website, built off the ReactJs framework and deployed on Github pages\r\n\t\t\t\tcontains no backend integration i.e. no routes are actually implemented along with a\r\n\t\t\t\twebserver as there is no requirement to do so as this website only serves the purpose\r\n\t\t\t\tof displaying my projects.`,\r\n\r\n\t\t\t\ttitle_style: \"p_title\",\r\n\t\t\t\tbody_style: \"p_body\",\r\n\t\t\t\tcontainer: \"p\"\r\n\t\t\t},\r\n\r\n\t\t\t\r\n\t\t\t{\r\n\t\t\t\ttitle: 'Pygame Blackjack GUI game',\r\n\t\t\t\tbody:\r\n\t\t\t\t`\r\n\t\t\t\tThis was my very first personal project, and was created with Pygame and was the project\r\n\t\t\t\tthat had taught me Python and the basics of Object oriented and Event oriented programming.\r\n\t\t\t\t`,\r\n\t\t\t\ttitle_style: \"p_title\",\r\n\t\t\t\tbody_style: \"p_body\",\r\n\t\t\t\tcontainer: \"p\"\r\n\r\n\t\t\t}\r\n\t\t\t]\r\n\t},\r\n\r\n\r\n\r\n]\r\n\r\n","import React, { Component } from 'react'\r\nimport {texts} from './text'\r\nimport './body.css'\r\n\r\n\r\n\r\nfunction Body()  {\r\n\tconst contains_title = (item) =>  {\r\n\t\tif(item.title){\r\n\t\t\treturn(\r\n\t\t\t\t<h2 className={item.title_style}>\r\n\t\t\t\t\t{item.title}\r\n\t\t\t\t</h2>\r\n\t\t\t)\r\n\t\t}\r\n\t}\r\n\r\n\tconst contains_body = (item) => {\r\n\t\tif(item.body) {\r\n\t\t\treturn(\r\n\t\t\t<p className={item.body_style}>\r\n\t\t\t\t{\r\n\t\t\t\t\titem.body.split('\\n').reduce((total, line) => [total, <br/>, line])\r\n\t\t\t\t}\r\n\t\t\t</p>\r\n\t\t\t)\r\n\t\t}\r\n\t};\r\n\r\n\tconst contains_img = (item) => {\r\n\t\tif(item.image) {\r\n\t\t\treturn(\r\n\t\t\t\t<div className={item.image_style}>\r\n\t\t\t\t\t<img src={item.image}/>\r\n\t\t\t\t</div>\r\n\t\t\t)\r\n\t\t}\r\n\t};\r\n\r\n\tconst contains_children = (item) => {\r\n\t\tif(item.children) {\r\n\r\n\t\t\treturn item.children.map((i, index) => {\r\n\t\t\t\treturn (\r\n\t\t\t\t\t<div className={i.container}>\r\n\t\t\t\t\t\t{contains_title(i)}\r\n\t\t\t\t\t\t{contains_body(i)}\r\n\t\t\t\t\t\t{contains_img(i)}\r\n\t\t\t\t\t</div>\r\n\t\t\t\t)\r\n\t\t\t})\r\n\t\t}\r\n\t}\r\n\r\n\r\n\treturn ([\r\n\t\t<div className='main-body'>\r\n\t\t{\r\n\t\t\ttexts.map((item,index) => {\r\n\t\t\t\treturn (\r\n\t\t\t\t\t<div className={item.container} id= {item.id}>\r\n\r\n\t\t\t\t\t\t{contains_title(item)}\r\n\t\t\t\t\t\t{contains_body(item)}\r\n\t\t\t\t\t\t{contains_img(item)}\r\n\t\t\t\t\t\t{contains_children(item)}\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t</div>\t\r\n\t\t\t\t\t)\r\n\t\t\t})\r\n\r\n\t\t}\r\n\t\t</div>\r\n\r\n\t])\r\n\r\n}\r\n\r\nexport default Body","import logo from './logo.svg';\r\nimport Navbar from \"./Components/Nav/nav.js\"\r\nimport Body from \"./Components/Body/body.js\"\r\nimport To_top from './Components/Nav/button.js'\r\nimport './App.css';\r\n\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <header className=\"App-header\">\r\n      \t<Navbar/>\r\n      </header>\r\n      <body className = \"App-body\">\r\n      \t<Body/>\r\n      </body>\r\n      <footer className = \"App-footer\">\r\n      </footer>\r\n\r\n    </div>\r\n\r\n\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport {BrowserRouter, Route} from 'react-router-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n  \n\t<BrowserRouter basename={window.location.pathname || ''}>\n\t\t<Route exact path=\"/\" component={App} />\n\t</BrowserRouter>\n\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}